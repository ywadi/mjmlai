---
---

<div class="chat-container" id="chatContainer">
  <div class="chat-header">
    <button class="toggle-button">
      <i class="ph ph-robot"></i>
    </button>
    <span class="header-title">AI Assistant</span>
    <button class="collapse-button" aria-label="Toggle chat panel">
      <i class="ph ph-caret-down"></i>
    </button>
  </div>
  
  <div class="chat-content">
    <div class="messages-container" id="messagesContainer">
      <div class="message ai">
        <div class="message-content">
          <p>Hello! I'm your AI assistant. I can help you with:</p>
          <ul>
            <li>Writing and editing MJML code</li>
            <li>Explaining email template concepts</li>
            <li>Suggesting improvements</li>
            <li>Debugging issues</li>
          </ul>
          <p>How can I help you today?</p>
        </div>
      </div>
    </div>

    <div class="input-container">
      <div class="input-wrapper">
        <textarea 
          id="messageInput" 
          placeholder="Type your message..." 
          rows="1"
          aria-label="Message input"
        ></textarea>
        <button class="send-button" aria-label="Send message">
          <i class="ph ph-paper-plane-right"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  const chatContainer = document.getElementById('chatContainer');
  const collapseButton = chatContainer?.querySelector('.collapse-button');
  const messageInput = document.getElementById('messageInput') as HTMLTextAreaElement;
  const messagesContainer = document.getElementById('messagesContainer');
  const sendButton = chatContainer?.querySelector('.send-button');

  // Toggle chat panel
  collapseButton?.addEventListener('click', () => {
    chatContainer?.classList.toggle('collapsed');
    const isCollapsed = chatContainer?.classList.contains('collapsed');
    collapseButton.querySelector('i')?.classList.toggle('ph-caret-down', !isCollapsed);
    collapseButton.querySelector('i')?.classList.toggle('ph-caret-up', isCollapsed);
  });

  // Auto-resize textarea
  messageInput?.addEventListener('input', () => {
    messageInput.style.height = 'auto';
    messageInput.style.height = messageInput.scrollHeight + 'px';
  });

  // Handle Enter key (Shift+Enter for new line)
  messageInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  // Send message
  sendButton?.addEventListener('click', sendMessage);

  function sendMessage() {
    const content = messageInput?.value.trim();
    if (!content) return;

    // Add user message
    addMessage(content, 'user');

    // Clear input
    messageInput.value = '';
    messageInput.style.height = 'auto';

    // Simulate AI response (replace with actual API call later)
    setTimeout(() => {
      addMessage("I'll help you with that! (This is a placeholder response)", 'ai');
    }, 1000);
  }

  function addMessage(content: string, type: 'user' | 'ai') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.innerHTML = `
      <div class="message-content">
        <p>${content}</p>
      </div>
    `;
    
    messagesContainer?.appendChild(messageDiv);
    messagesContainer?.scrollTo({
      top: messagesContainer.scrollHeight,
      behavior: 'smooth'
    });
  }
</script>

<style>
  .chat-container {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    background: var(--surface);
    border: 1px solid var(--border);
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    height: 500px;
    width: 600px;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    z-index: 1000;
  }

  .chat-container.collapsed {
    height: 48px;
    width: 300px;
  }

  .chat-header {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    gap: 0.75rem;
    background: var(--primary);
    border-bottom: 1px solid var(--primary);
    height: 48px;
    border-radius: 8px 8px 0 0;
  }

  .toggle-button,
  .collapse-button {
    background: transparent;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: all 0.2s ease;
    opacity: 0.9;
  }

  .toggle-button:hover,
  .collapse-button:hover {
    background: rgba(255, 255, 255, 0.1);
    opacity: 1;
  }

  .toggle-button i,
  .collapse-button i {
    font-size: 1.25rem;
  }

  .header-title {
    flex: 1;
    font-weight: 500;
    color: white;
    font-size: 0.875rem;
  }

  .chat-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .messages-container {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .message {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    max-width: 80%;
  }

  .message.user {
    align-self: flex-end;
  }

  .message-content {
    background: var(--primary);
    padding: 0.75rem 1rem;
    border-radius: 8px;
    color: white;
  }

  .message.user .message-content {
    background: var(--primary);
  }

  .message.ai .message-content {
    background: var(--border);
  }

  .message-content p {
    margin: 0;
    line-height: 1.5;
  }

  .message-content ul {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
  }

  .message-content li {
    margin: 0.25rem 0;
  }

  .input-container {
    padding: 1rem;
    background: var(--surface);
    border-top: 1px solid var(--border);
  }

  .input-wrapper {
    display: flex;
    gap: 0.75rem;
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 0.5rem;
  }

  textarea {
    flex: 1;
    background: transparent;
    border: none;
    color: var(--text);
    font-family: inherit;
    font-size: 0.875rem;
    line-height: 1.5;
    max-height: 150px;
    min-height: 24px;
    padding: 0;
    resize: none;
  }

  textarea:focus {
    outline: none;
  }

  textarea::placeholder {
    color: var(--text);
    opacity: 0.5;
  }

  .send-button {
    background: transparent;
    border: none;
    color: var(--text);
    cursor: pointer;
    padding: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .send-button:hover {
    background: var(--primary-hover);
  }

  .send-button i {
    font-size: 1.25rem;
  }
</style>
