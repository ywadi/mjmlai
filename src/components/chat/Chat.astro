---
---

<div class="chat-container" id="chatContainer">
  <div class="chat-header">
    <div class="header-title">
      <i class="ph ph-robot"></i>
      AI Assistant
    </div>
    <button class="collapse-button">
      <i class="ph ph-caret-up"></i>
    </button>
  </div>
  
  <div class="chat-content">
    <div class="messages-container" id="messagesContainer">
      <!-- Messages will be added here dynamically -->
    </div>
    
    <div class="input-container">
      <div class="input-wrapper">
        <textarea
          id="messageInput"
          placeholder="Type your message..."
          rows="1"
        ></textarea>
        <button class="send-button">
          <i class="ph ph-paper-plane-right"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { config } from '../../config';
  
  const chatContainer = document.getElementById('chatContainer');
  const collapseButton = chatContainer?.querySelector('.collapse-button');
  const messageInput = document.getElementById('messageInput') as HTMLTextAreaElement;
  const messagesContainer = document.getElementById('messagesContainer');
  const sendButton = chatContainer?.querySelector('.send-button');

  // Store thread ID
  let currentThreadId: string | null = null;
  
  // Store current editor content
  let currentEditorContent: string = '';

  // Add initial welcome message
  document.addEventListener('DOMContentLoaded', () => {
    const welcomeMessage = `Hello! I'm your AI assistant. I can help you with:
• Writing and editing MJML code
• Explaining email template concepts
• Suggesting improvements
• Debugging issues

How can I help you today?`;
    addMessage(welcomeMessage, 'ai');
  });

  // Listen for editor content changes
  window.addEventListener('editorContentChanged', ((event: CustomEvent) => {
    console.log('Editor content changed:', event.detail.content); // Debug log
    currentEditorContent = event.detail.content;
  }) as EventListener);

  // Function to get latest editor content
  async function getLatestEditorContent(): Promise<string> {
    return new Promise((resolve) => {
      // Request content from editor
      window.dispatchEvent(new CustomEvent('getEditorContent'));
      
      // Listen for response
      const handler = (event: CustomEvent) => {
        window.removeEventListener('editorContentResponse', handler as EventListener);
        console.log('Received editor content:', event.detail.content); // Debug log
        resolve(event.detail.content);
      };
      
      window.addEventListener('editorContentResponse', handler as EventListener);
      
      // Fallback to stored content after timeout
      setTimeout(() => {
        window.removeEventListener('editorContentResponse', handler as EventListener);
        console.log('Using stored editor content:', currentEditorContent); // Debug log
        resolve(currentEditorContent);
      }, 500);
    });
  }

  // Toggle chat panel
  collapseButton?.addEventListener('click', () => {
    chatContainer?.classList.toggle('collapsed');
    const isCollapsed = chatContainer?.classList.contains('collapsed');
    collapseButton.querySelector('i')?.classList.toggle('ph-caret-down', !isCollapsed);
    collapseButton.querySelector('i')?.classList.toggle('ph-caret-up', isCollapsed);
  });

  // Auto-resize textarea
  messageInput?.addEventListener('input', () => {
    messageInput.style.height = 'auto';
    messageInput.style.height = messageInput.scrollHeight + 'px';
  });

  // Handle Enter key (Shift+Enter for new line)
  messageInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  // Send message
  sendButton?.addEventListener('click', sendMessage);

  async function sendMessage() {
    const content = messageInput?.value.trim();
    if (!content) return;

    // Add user message
    addMessage(content, 'user');

    // Clear input
    messageInput.value = '';
    messageInput.style.height = 'auto';

    try {
      // Show loading state
      const loadingMessage = addMessage('Thinking...', 'ai', true);
      
      // Get latest editor content
      const editorContent = await getLatestEditorContent();
      console.log('Sending message with editor content:', editorContent); // Debug log
      
      // Prepare request body
      const requestBody: any = {
        message: content,
        currentMjml: editorContent
      };
      if (currentThreadId) {
        requestBody.threadId = currentThreadId;
      }

      console.log('Sending request body:', requestBody); // Debug log

      // Send message to API
      const response = await fetch(config.api.chat.url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error('Failed to get response');
      }

      const data = await response.json();
      
      // Remove loading message
      loadingMessage.remove();

      // Store thread ID if not already set
      if (!currentThreadId && data.threadId) {
        currentThreadId = data.threadId;
        console.log('Thread ID set:', currentThreadId);
      }

      // Parse the output JSON string
      try {
        const output = JSON.parse(data.output);
        console.log('Parsed output:', output);
        
        // Update editor if MJML is not empty
        if (output.mjml && output.mjml.trim() !== '') {
          console.log('Updating editor with MJML:', output.mjml);
          // Create a new custom event with the MJML content
          const event = new CustomEvent('updateEditor', {
            detail: { content: output.mjml }
          });
          window.dispatchEvent(event);
        }

        // Add AI response message
        if (output.message) {
          addMessage(output.message, 'ai');
        }
      } catch (parseError) {
        console.error('Error parsing output JSON:', parseError);
        addMessage('Sorry, I encountered an error processing the response. Please try again.', 'ai');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      addMessage('Sorry, I encountered an error processing your request. Please try again.', 'ai');
    }
  }

  function addMessage(content: string, type: 'user' | 'ai', isLoading: boolean = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}${isLoading ? ' loading' : ''}`;
    
    // Create the message content div with proper styling
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    
    // Add the content
    const paragraph = document.createElement('p');
    paragraph.textContent = content;
    messageContent.appendChild(paragraph);
    
    // Add the message content to the message container
    messageDiv.appendChild(messageContent);
    
    // Add to messages container
    messagesContainer?.appendChild(messageDiv);
    messagesContainer?.scrollTo(0, messagesContainer.scrollHeight);
    
    return messageDiv;
  }
</script>

<style is:global>
  .chat-content {
    display: flex !important;
    flex-direction: column !important;
    height: 400px !important;
    position: relative !important;
  }

  .messages-container {
    flex: 1 1 auto !important;
    overflow-y: auto !important;
    background: #1a1b26 !important;
    padding: 1rem !important;
    display: flex !important;
    flex-direction: column !important;
    gap: 1rem !important;
    margin-bottom: 70px !important;
  }

  .input-container {
    position: absolute !important;
    bottom: 0 !important;
    left: 0 !important;
    right: 0 !important;
    padding: 0.75rem !important;
    background: #1a1b26 !important;
    border-top: 1px solid rgba(255, 255, 255, 0.1) !important;
    border-radius: 0 0 12px 12px !important;
  }

  .message {
    margin-bottom: 0.5rem !important;
  }

  .message:last-child {
    margin-bottom: 0 !important;
  }

  .message.user .message-content {
    background: #7aa2f7 !important;
    color: white !important;
    border-radius: 12px 12px 0 12px !important;
    padding: 0.75rem 1rem !important;
  }

  .message.ai .message-content {
    background: #24283b !important;
    color: #a9b1d6 !important;
    border-radius: 12px 12px 12px 0 !important;
    padding: 0.75rem 1rem !important;
  }

  .message-content {
    font-size: 0.875rem !important;
    line-height: 1.5 !important;
  }

  .message-content p {
    margin: 0 !important;
    white-space: pre-line !important;
  }

  .chat-container {
    background: #1a1b26 !important;
  }

  .input-wrapper {
    background: #24283b !important;
    border: 1px solid rgba(255, 255, 255, 0.1) !important;
    border-radius: 8px !important;
    padding: 0.5rem 0.75rem !important;
    display: flex !important;
    align-items: center !important;
    gap: 0.5rem !important;
  }
</style>

<style>
  .chat-container {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    width: 320px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2);
    transition: height 0.3s ease;
    max-height: 500px;
    z-index: 1000;
    color: #a9b1d6;
  }

  .chat-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: #1a1b26;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px 12px 0 0;
  }

  .header-title {
    flex: 1;
    font-size: 0.875rem;
    font-weight: 500;
    color: #a9b1d6;
  }

  .toggle-button,
  .collapse-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
    border: none;
    padding: 0.25rem;
    color: #a9b1d6;
    opacity: 0.7;
    cursor: pointer;
    border-radius: 4px;
  }

  .toggle-button:hover,
  .collapse-button:hover {
    background: rgba(255, 255, 255, 0.1);
    opacity: 1;
  }

  .chat-content {
    display: flex;
    flex-direction: column;
    height: 400px;
    overflow: hidden;
  }

  .input-container {
    padding: 1rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    background: #1a1b26;
    border-radius: 0 0 12px 12px;
  }

  .input-wrapper {
    display: flex;
    align-items: flex-end;
    gap: 0.5rem;
    background: #24283b;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.75rem;
  }

  textarea {
    flex: 1;
    border: none;
    background: none;
    resize: none;
    padding: 0;
    font-size: 0.875rem;
    line-height: 1.4;
    color: #a9b1d6;
    min-height: 24px;
    max-height: 120px;
    font-family: inherit;
  }

  textarea::placeholder {
    color: #565f89;
  }

  textarea:focus {
    outline: none;
  }

  .send-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
    border: none;
    padding: 0.25rem;
    color: #7aa2f7;
    cursor: pointer;
    border-radius: 4px;
    opacity: 0.9;
  }

  .send-button:hover {
    opacity: 1;
    background: rgba(122, 162, 247, 0.1);
  }

  .send-button i {
    font-size: 1.25rem;
  }

  .chat-container.collapsed .chat-content {
    display: none;
  }

  /* Scrollbar styles */
  .messages-container::-webkit-scrollbar {
    width: 4px;
  }

  .messages-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .messages-container::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
  }

  .messages-container::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  /* Loading animation */
  .message.loading .message-content {
    opacity: 0.7;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
