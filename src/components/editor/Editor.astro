---
import EditorControls from './controls/EditorControls.astro';
import AssetPanel from './assets/AssetPanel.astro';
---

<div class="editor">
  <EditorControls />
  <div class="editor-container">
    <AssetPanel />
    <div id="editor" class="editor-content"></div>
  </div>
</div>

<style>
  .editor {
    background: var(--surface);
    border: 1px solid var(--border);
    border-radius: 8px;
    overflow: hidden;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .editor-container {
    flex: 1;
    display: flex;
    overflow: hidden;
  }

  .editor-content {
    flex: 1;
    height: 100%;
    padding: 1rem;
    overflow: auto;
  }

  :global(.cm-editor) {
    height: 100%;
  }
</style>

<script>
  import { EditorView, basicSetup } from 'codemirror';
  import { xml } from '@codemirror/lang-xml';
  import { oneDark } from '@codemirror/theme-one-dark';

  let editorView: EditorView;

  // Default MJML template
  const defaultMJML = `<mjml>
  <mj-body>
    <mj-section>
      <mj-column>
        <mj-text>
          Hello World!
        </mj-text>
      </mj-column>
    </mj-section>
  </mj-body>
</mjml>`;

  // Function to format XML/MJML
  function formatXml(xml: string) {
    let formatted = '';
    let indent = '';
    const tab = '  '; // 2 spaces for indentation
    xml.split(/>\s*</).forEach(function(node) {
      if (node.match(/^\/\w/)) {
        // Closing tag
        indent = indent.substring(tab.length);
      }
      formatted += indent + '<' + node + '>\n';
      if (node.match(/^<?\w[^>]*[^\/]$/)) {
        // Opening tag
        indent += tab;
      }
    });
    return formatted.substring(1, formatted.length - 2);
  }

  // Function to trigger preview update
  function triggerPreviewUpdate(content: string) {
    const updateEvent = new CustomEvent('editorChange', {
      detail: { content }
    });
    window.dispatchEvent(updateEvent);

    // Also emit current content for other components
    const contentUpdateEvent = new CustomEvent('editorContentChanged', {
      detail: { content }
    });
    window.dispatchEvent(contentUpdateEvent);
  }

  // Function to get current editor content
  function getCurrentContent() {
    if (!editorView) return defaultMJML;
    const content = editorView.state.doc.toString();
    return content || defaultMJML;
  }

  // Expose current content through a custom event
  window.addEventListener('getEditorContent', ((event: CustomEvent) => {
    const content = getCurrentContent();
    console.log('Sending editor content:', content); // Debug log
    const responseEvent = new CustomEvent('editorContentResponse', {
      detail: { content }
    });
    window.dispatchEvent(responseEvent);
  }) as EventListener);

  // Initialize editor after DOM load
  document.addEventListener('DOMContentLoaded', () => {
    const editor = document.getElementById('editor');
    if (!editor) return;

    // Add drop zone styling
    editor.addEventListener('dragover', (e) => {
      e.preventDefault();
      e.stopPropagation();
      e.dataTransfer.dropEffect = 'copy';
      editor.classList.add('drop-target');
    });

    editor.addEventListener('dragleave', (e) => {
      e.stopPropagation();
      editor.classList.remove('drop-target');
    });

    editor.addEventListener('drop', (e) => {
      e.preventDefault();
      e.stopPropagation();
      editor.classList.remove('drop-target');

      // Get the URL from the drag data
      const url = e.dataTransfer.getData('text/plain');

      if (url && editorView) {
        // Get the editor content element
        const scroller = editor.querySelector('.cm-scroller');
        if (!scroller) return;

        // Calculate position relative to the content area
        const rect = scroller.getBoundingClientRect();
        const x = e.clientX - rect.left + scroller.scrollLeft;
        const y = e.clientY - rect.top + scroller.scrollTop;

        // Get position in the document
        const pos = editorView.posAtCoords({ x, y });
        
        if (pos !== null) {
          editorView.dispatch({
            changes: { from: pos, insert: url }
          });
          // Focus editor after drop
          editorView.focus();
        }
      }
    });

    // Initialize CodeMirror
    editorView = new EditorView({
      doc: defaultMJML,
      extensions: [
        basicSetup,
        xml(),
        oneDark,
        EditorView.theme({
          '&': { height: '100%' },
          '.cm-scroller': { overflow: 'auto' },
          '.cm-content': { minHeight: '100%' },
        }),
        EditorView.updateListener.of(update => {
          if (update.docChanged) {
            const content = update.state.doc.toString();
            console.log('Editor content updated:', content); // Debug log
            triggerPreviewUpdate(content);
          }
        }),
      ],
      parent: editor
    });

    // Emit initial content
    const initialContent = getCurrentContent();
    triggerPreviewUpdate(initialContent);

    // Listen for content update events from chat
    window.addEventListener('updateEditor', ((event: CustomEvent) => {
      console.log('Received updateEditor event:', event.detail);
      if (event.detail && event.detail.content && editorView) {
        console.log('Updating editor content to:', event.detail.content);
        
        // Format the MJML content
        const formattedContent = formatXml(event.detail.content);
        
        // Update editor content
        const currentPos = editorView.state.doc.length;
        editorView.dispatch({
          changes: { from: 0, to: currentPos, insert: formattedContent }
        });

        // Trigger preview update using window
        triggerPreviewUpdate(formattedContent);
        
        console.log('Editor update complete');
      }
    }) as EventListener);

    // Function to dispatch editor content
    const dispatchContent = (content: string) => {
      const event = new CustomEvent('editorChange', {
        detail: { content }
      });
      window.dispatchEvent(event);
    };

    // Listen for insertAtCursor events
    window.addEventListener('insertAtCursor', (e: CustomEvent) => {
      if (editorView && e.detail?.content) {
        const pos = editorView.state.selection.main.head;
        editorView.dispatch({
          changes: { from: pos, insert: e.detail.content }
        });
        editorView.focus();
      }
    });

    // Dispatch initial content after a short delay
    setTimeout(() => {
      dispatchContent(defaultMJML);
    }, 100);

    // Listen for editor changes
    editorView.dom.addEventListener('keyup', () => {
      const content = editorView.state.doc.toString();
      dispatchContent(content);
    });

    // Handle view toggling
    window.addEventListener('toggleEditorView', (e: CustomEvent) => {
      const { showAssets } = e.detail;
      // Handle view toggle if needed
    });
  });
</script>
